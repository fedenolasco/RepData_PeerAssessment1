showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3
p3(5)
xyplot(x,y,pch=19,col=rgb(0,.5,.5))
xyplot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5),.3)
plot(x,y,pch=19,col=rgb(0,.5,.5),alpha=.3)
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <-brewer.pal(3,"Bugn")
cols <-brewer.pal(3,"BuGn")
shoMe(cols)
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(disp,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom=c("boxplot"))
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv,facets=.~drv)
qplot(display.brewer.all(),data=mpg,facets=.~drv)
qplot(displ,data=mpg,facets=.~drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
0
exit
quit
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=. ~ drv)
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth()+facet_grid(. ~ drv)
g+geom_point()+geom_smooth()+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement",y="Hwy Mileage"))
g+geom_point(aes(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
)
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geosmooth(size=4,linetype=3,se=FALSE)
g+geom_point(aes(color=drv),size=2,alpha=1/2)+geom_smooth(size=4,linetype=3,se=FALSE)
g + theme_bw(base_family="Times")
play()
g + theme_bw(base_family="Arial")
g + theme_bw(base_family="Helvetica")
nxt()
g + theme_bw(base_family="Helvetica")
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(displ,hwy,aes(color=year))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year))
)
g<-g+geom_point()
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",totle="Swirl Rules!")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut())
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut, geom=c("point","smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth()
qplot(carat,price,data=diamonds, color=cut) + geom_smoot() + facet_grid(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth() + facet_grid(.~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth()
g<-ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point()
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(size=3,color="pink")
ggplot(diamonds,aes(carat,price) + geom_boxplot() + facet_grid(. ~ cut)
)
ggplot(diamonds,aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
summary(BodyWeight)
str(BodyWeight)
?point()
?point
?points()
?text()
?line()
?lines()
?text()
?llines()
?lines()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?splom()
?print.trellis()
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom_point()
g + geom_smooth()
library(ggplot2)
library(ggplot2movies
)
library("swirl")
swirl()
exit
quit
info()
maun()
main()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc)
)
abline(h=1.5,col="blue")
abline(h=0.4,col="red")
5
abline(h=0.05,col="green")
12
abline(h=0.05,col="green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(mt)
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=[newClust])
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,;wd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
maty %*% diag %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2()
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-svd1$u %*% svd1$d %*% svd1$v
a1<-(svd1$u %*% svd1$d) %*% svd1$v
a1<-(svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
skip(0)
skip()
myImage(a1)
skip()
myImage(a2)
skip()
myImage(svd1$u[,1:10] %*%  diag(svd1$d[1:10])  %*% t(svd1$v[,1:10]))
dim(ssd)
name(ssd[,562:563])
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
skyp()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye(0)
bye()
?aggregate
setwd("D:/onedrive/Documents/R/05_ReproducibleAnalysis")
setwd("D:/onedrive/Documents/R/05_ReproducibleAnalysis/RepData_PeerAssessment1")
?read.csv
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
con <- unz(temp, "activity.csv")
con
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
unzipsource <- unz(temp, "activity.csv")
activity<-read.csv("activity.csv")
activity<-read.csv(zipsource)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
zipsource <- unz(temp, "activity.csv")
activity<-read.csv(zipsource)
summary(activity)
activity<-transform(activity,realdate=as.POSIXct(activity$date), format="%d/%m/%Y %H:%M:%S",tz=""))
activity<-transform(activity,realdate=as.POSIXct(activity$date), format="%d/%m/%Y %H:%M:%S",tz="")
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
zipsource <- unz(temp, "activity.csv")
activity<-read.csv(zipsource)
unlink(temp)
activity<-transform(activity,realdate=as.POSIXct(activity$date), format="%d/%m/%Y %H:%M:%S",tz="")
summary(activity)
head(activity)
activity<-transform(activity,realdate=as.POSIXct(activity$date), format="%d/%m/%Y",tz="")
head(activity)
class(activity.realdate)
class(activity[,realdate])
activity<-transform(activity,realdate=as.POSIXct(activity$date))
head(activity)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
zipsource <- unz(temp, "activity.csv")
activity<-read.csv(zipsource)
unlink(temp)
activity<-transform(activity,realdate=as.POSIXct(activity$date))
head(activity)
class(activity$realdate)
class(activity$date)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
zipsource <- unz(temp, "activity.csv")
activity<-read.csv(zipsource)
unlink(temp)
activity<-transform(activity,date=as.POSIXct(activity$date))
summary(activity)
head(activity)
?day
weekdays()
?weekdays()
weekdays(activity$date)
?wtith
?with
?mean
with(activity$date~steps,mean(na.rm=TRUE))
?weekdays
with(activity, tapply(steps, date, mean))
?transpose
summary(with(activity, tapply(steps, date, mean)))
str(with(activity, tapply(steps, date, mean)))
dim(with(activity, tapply(steps, date, mean)))
dim(with(activity, lapply(steps, date, mean)))
dim(with(activity, sapply(steps, date, mean)))
dim(with(activity, tapply(steps, date, mean)))
t(with(activity, tapply(steps, date, mean)))
mean(steps~date)
mean(steps~date,na.rm=TRUE)
?mean
with(activity, tapply(steps, date, mean))
lapply(split(steps,date,mean))
lapply(split(steps,date),mean)
lapply(split(date,steps),mean)
lapply(split(activity$date,actovity$steps),mean)
lapply(split(activity$date,activity$steps),mean)
lapply(split(activity$steps,activity$date),mean)
lapply(split(activity$steps,activity$date),mean)
lapply(split(activity$steps,activity$date),mean,simplify=T)
lapply(split(activity$steps,activity$date),mean,simplify=F)
as.dataframe(lapply(split(activity$steps,activity$date),mean))
as.data.frame(lapply(split(activity$steps,activity$date),mean))
unlist(lapply(split(activity$steps,activity$date),mean))
data.frame(Reduce(rbin,reduce((lapply(split(activity$steps,activity$date),mean))
)
)
)
lapply(split(activity$steps,activity$date),mean))
lapply(split(activity$steps,activity$date),mean)
aggregate(activity$steps,by=activity$date,mean)
aggregate(activity$steps,by=list(activity$date),mean)
?hist
stepsperday<-aggregate(activity$steps,by=list(activity$date),sum)
hist(stepsperday)
hist(stepsperday$steps)
stepsperday<-aggregate(activity$steps,by=list(activity$date),sum)
head(stepsperday)
hist(stepsperday$steps,na.rm=T)
hist(stepsperday$x)
?hist
hist(stepsperday$x,main="Frequency of steps per day",xlab="Steps")
aggregate(activity$steps,by=list(activity$date),summary(mean,median)
)
aggregate(activity$steps,by=list(activity$date),mean)
aggregate(activity$steps,by=list(activity$date),mean, median)
?summary
summary(cars)
stepsperday
medianperday<-aggregate(activity$steps,by=list(activity$date),median)
medianperday
stepsperday_mean<-mean(stepsperday,rm.na=T)
stepsperday_mean<-mean(stepsperday,na.rm=T)
stepsperday_mean<-mean(stepsperday,na.rm=T)
stepsperday
stepsperday_mean<-mean(stepsperday$x,na.rm=T)
stepsperday_mean
stepsperday_median<-median(stepsperday$x,na.rm=T)
stepsperday_median
?rename
head(activity)
activity<-transform(activity,intervalfactor=as.factor(activity$interval))
par(mfrow=c(1,1))
plot(activity$intervalfactor,activity$date,ylab="Time Series",xlab="Intervals",type="l")
plot(activity$intervalfactor,activity$steps,ylab="Time Series",xlab="Intervals",type="l")
plot(activity$intervalfactor,activity$steps,ylab="Steps",xlab="Intervals",type="l")
head(activity)
intervalfactor_mean<-tapply(activity$steps,activity$intervalfactor, mean, na.rm=T))
par(mfrow=c(1,1))
plot(intervalfactor_mean,ylab="Average Steps",xlab="Intervals",type="l")
intervalfactor_mean<-tapply(activity$steps,activity$intervalfactor, mean, na.rm=T)
par(mfrow=c(1,1))
plot(intervalfactor_mean,ylab="Average Steps",xlab="Intervals",type="l")
activity$intervalfactor
stepsbyinterval_mean<-tapply(activity$steps,activity$intervalfactor, mean, na.rm=T)
par(mfrow=c(1,1))
plot(stepsbyinterval_mean,ylab="Average Steps",xlab="Intervals",type="l")
maxstepsinterval <- activity$interval[which.max(stepsbyinterval_mean)]
maxstepsinterval
nrows(is.na(activity$steps))
n(is.na(activity$steps))
N(is.na(activity$steps))
sum(is.na(activity$steps))
summary(activity,na)
summary(activity)
stepsbyinterval_mean
stepsbyinterval_mean<-aggregate(activity$steps,activity$intervalfactor, mean, na.rm=T)
stepsbyinterval_mean<-aggregate(activity$steps,by=list(activity$intervalfactor), mean, na.rm=T)
par(mfrow=c(1,1))
plot(stepsbyinterval_mean,ylab="Average Steps",xlab="Intervals",type="l")
maxstepsinterval <- activity$interval[which.max(stepsbyinterval_mean)]
maxstepsinterval
class(stepsbyinterval_mean)
stepsbyinterval_mean
plot(stepsbyinterval_mean$x,ylab="Average Steps",xlab="Intervals",type="l")
names(stepsbyinterval_mean)<-c("intervalfactor","stepsmean")
par(mfrow=c(1,1))
plot(stepsbyinterval_mean$stepsmean,ylab="Average Steps",xlab="Intervals",type="l")
stepsbyinterval_mean
str(stepsbyinterval_mean)
maxstepsinterval <- activity$interval[which.max(stepsbyinterval_mean)]
maxstepsinterval
maxstepsinterval <- activity$interval[which.max(stepsbyinterval_mean$stepsmean)]
maxstepsinterval
head(activity)
head(stepsbyinterval_mean)
newdataset = merge(activity, stepsbyinterval_mean, by.x="intervalfactor", by.y = "row.names")
newdataset = merge(activity, stepsbyinterval_mean, by="intervalfactor")
head(newdataset)
tail(newdataset)
newdataset[is.na(newdataset$steps),]
tail(newdataset)
newdataset[is.na(newdataset$steps),newdataset$steps]<-newdataset[is.na(newdataset$steps),newdataset$stepsmean]
newdataset[is.na(newdataset$steps),newdataset$steps]<-newdataset[is.na(newdataset$steps),newdataset$stepsmean]
newdataset <- merge(activity, stepsbyinterval_mean, by="intervalfactor")
newdataset[is.na(newdataset$steps),newdataset$steps]<-newdataset[is.na(newdataset$steps),newdataset$stepsmean]
tail(newdataset)
newdataset[is.na(newdataset$steps),newdataset$steps]<-newdataset$stepsmean[is.na(newdataset$steps)]
newdataset[is.na(newdataset$steps)]<-newdataset$stepsmean[is.na(newdataset$steps)]
newdataset$steps[is.na(newdataset$steps)]<-newdataset$stepsmean[is.na(newdataset$steps)]
tail(newdataset)
head(newdataset)
stepsperday<-aggregate(newdataset$steps,by=list(newdataset$date),sum)
names(stepsperday)<-c("steps","date")
hist(stepsperday$steps,main="Frequency of steps per day",xlab="Steps")
hist(stepsperday$steps,main="Frequency of steps per day",xlab="Steps",breaks=20)
stepsperday<-aggregate(newdataset$steps,by=list(newdataset$date),sum)
names(stepsperday)<-c("steps","date")
hist(stepsperday,main="Frequency of steps per day",xlab="Steps",breaks=20)
stepsperday_sum2<-aggregate(newdataset$steps,by=list(newdataset$date),sum)
names(stepsperday)<-c("date","steps")
hist(stepsperday_sum2$steps,main="Frequency of steps per day",xlab="Steps",breaks=20)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
zipsource <- unz(temp, "activity.csv")
activity<-read.csv(zipsource, na.strings = "NA")
unlink(temp)
activity<-transform(activity,date=as.POSIXct(activity$date))
```
stepsperday<-aggregate(activity$steps,by=list(activity$date),sum)
hist(stepsperday$x,main="Frequency of steps per day",xlab="Steps")
stepsperday_mean<-mean(stepsperday$x,na.rm=T)
stepsperday_mean
stepsperday_median<-median(stepsperday$x,na.rm=T)
stepsperday_median
activity<-transform(activity,intervalfactor=as.factor(activity$interval))
stepsbyinterval_mean<-aggregate(activity$steps,by=list(activity$intervalfactor), mean, na.rm=T)
names(stepsbyinterval_mean)<-c("intervalfactor","stepsmean")
par(mfrow=c(1,1))
plot(stepsbyinterval_mean$stepsmean,ylab="Average Steps",xlab="Intervals",type="l")
maxstepsinterval <- activity$interval[which.max(stepsbyinterval_mean$stepsmean)]
maxstepsinterval
sum(is.na(activity$steps))
newdataset <- merge(activity, stepsbyinterval_mean, by="intervalfactor")
newdataset$steps[is.na(newdataset$steps)]<-newdataset$stepsmean[is.na(newdataset$steps)]
stepsperday_sum2<-aggregate(newdataset$steps,by=list(newdataset$date),sum)
hist(stepsperday_sum2$x,main="Frequency of steps per day",xlab="Steps",breaks=20)
hist(stepsperday_sum2$x,main="Frequency of steps per day",xlab="Steps")
stepsperday_mean2<-mean(stepsperday_sum2$x,na.rm=T)
stepsperday_mean2
stepsperday_median2<-median(stepsperday_sum2$x,na.rm=T)
stepsperday_median2
````
newdataset$day <- weekdays(newdataset$date)
class(newdataset$day)
newdataset$day[newdataset$day == "Saturday" | newdataset$day == "Saturday" ] <- "weekend"
newdataset$day[newdataset$day == "Monday" | newdataset$day == "Tuesday" | newdataset$day == "Wednesday"| newdataset$day == "Thursday" | newdataset$day == "Friday" ] <- "weekday"
stepsbyinterval_weekday_average =  tapply(subset(newdataset, day=="weekday")$steps, subset(newdataset, day=="weekday")$interval, mean, na.rm=TRUE)
stepsbyinterval_weekend_average =  tapply(subset(newdataset, day=="weekend")$steps, subset(newdataset, day=="weekend")$interval, mean, na.rm=TRUE)
par(mfrow = c(2, 1))
plot(stepsbyinterval_weekday_average, type="l", xlab="5 minute interval", ylab="Average number of steps", main="weekdays")
plot(stepsbyinterval_weekend_average, type="l", xlab="5 minute interva", ylab="Average number of steps", main="weekend")
plot(stepsbyinterval_weekend_average, type="l", xlab="5 minute interval", ylab="Average number of steps", main="weekend")
par(mfrow = c(2, 1))
plot(stepsbyinterval_weekday_average, type="l", xlab="5 minute interval", ylab="Average number of steps", main="weekdays")
plot(stepsbyinterval_weekend_average, type="l", xlab="5 minute interval", ylab="Average number of steps", main="weekend")
unlink(temp)
